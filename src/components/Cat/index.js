/*
auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useRef, useEffect, useMemo, useCallback } from 'react'
import { useAnimations, useGLTF } from '@react-three/drei'
import { LoopOnce } from 'three'

import CatPath from '../../assets/cat.glb'

const ACTIVE_CLIP_NAME = 'Arm_Cat|SharpenClaws_Vert'
const TIME_SCALE = 3

export default function Cat(props) {
  const { nodes, materials, animations } = useGLTF(CatPath)
  const { ref, actions, mixer } = useAnimations(animations)

  const idleCount = useRef(0)

  const material = useMemo(() => {
    const mat = materials.material
    mat.depthWrite = true
    
    return mat
  }, [materials])

  const handleNextClip = useCallback(() => {
    const actionRoll = (Math.random() * 10) - idleCount.current
    const idleRoll = (Math.random() * 9)

    let nextAction

    if (actionRoll <= 2) {
      nextAction = actions[ACTIVE_CLIP_NAME]
      idleCount.current = 0
    } else {
      if (idleRoll <= 4) {
        nextAction = actions['Arm_Cat|Idle_1']
      } else if ( idleRoll <= 5) {
        nextAction = actions['Arm_Cat|Idle_2']
      } else if ( idleRoll <= 6) {
        nextAction = actions['Arm_Cat|Idle_3']
      } else if ( idleRoll <= 7) {
        nextAction = actions['Arm_Cat|Idle_4']
      } else if ( idleRoll <= 8) {
        nextAction = actions['Arm_Cat|Idle_5']
      } else if ( idleRoll <= 9) {
        nextAction = actions['Arm_Cat|Idle_6']
      }

      idleCount.current += 1
    }

    nextAction.reset()
      .setEffectiveTimeScale(TIME_SCALE)
      .setLoop(LoopOnce, 1)
      .play()
  }, [actions])

  useEffect(() => {
    handleNextClip()
    mixer.addEventListener('finished', handleNextClip)

    return () => mixer.removeEventListener('finished', handleNextClip)
  }, [actions, handleNextClip, mixer])

  return (
    <group ref={ref} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={[4.28, 4.28, 4.28]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group rotation={[-Math.PI / 2, 0, 0]}>
            <primitive object={nodes._rootJoint} />
            <skinnedMesh
              material={material}
              geometry={nodes.Object_58.geometry}
              skeleton={nodes.Object_58.skeleton}
              castShadow
            />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload(CatPath)
